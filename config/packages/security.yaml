security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    encoders:
        # this internal class is used by Symfony to represent in-memory users
        Symfony\Component\Security\Core\User\User: 'auto'

    providers:
        backend_users:
            memory:
                users:
                    user_a: { password: '$argon2id$v=19$m=65536,t=4,p=1$1W3JOFeHLjsOcj3bkG9Oyg$9thBbDyPhdMr60Pk7VROSjyeA+G6pQDd0raCSO9Hlb4', roles: ['ROLE_USER'] }
                    user_b: { password: '$argon2id$v=19$m=65536,t=4,p=1$VbccFOZVNaaPIttadOccvw$HjxSi+pU1g1Vl+KpcqAlOVWHwkachrxnL6jB1+7C4MM', roles: ['ROLE_USER'] }
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            http_basic:
                realm: Secured Area
            anonymous: lazy
            provider: backend_users

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/, roles: ROLE_USER }
        # - { path: ^/profile, roles: ROLE_USER }
